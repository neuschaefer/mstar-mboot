Output of:
arm-none-eabi-gcc -Wall -Wshadow -Wwrite-strings -Wundef -Wstrict-prototypes -Wunused -Wunused-parameter -Wunused-function -Wunused-value -Wmissing-prototypes -Wmissing-declarations -Wdeclaration-after-statement -Wold-style-definition -fno-builtin-strlen -finline-limit=0 -fomit-frame-pointer -ffunction-sections -fdata-sections -fno-guess-branch-probability -funsigned-char -static-libgcc -falign-functions=1 -falign-jumps=1 -falign-labels=1 -falign-loops=1 -fno-pic -Os -march=armv7-a -EL -nostdlib -o out/sboot.elf -Wl,--sort-common -Wl,--sort-section,alignment -Wl,--gc-sections -Wl,-T,sboot_ldscript -Wl,--whole-archive -Wl,--start-group src/lib.a src/napoli/lib.a src/built-in.o src/napoli/built-in.o -Wl,--end-group -Wl,--no-whole-archive -Wl,--warn-common -Wl,-Map,out/sboot.elf.map -Wl,--verbose
==========
arm-none-eabi-gcc: unrecognized option '-EL'
GNU ld (Sourcery G++ Lite 2011.03-42) 2.20.51.20100809
  Supported emulations:
   armelf
using external linker script:
==================================================
/*
 * Automatically generated C config: don't edit
 * SBoot version: 1.0.0
 */







/*
 * Platform Configuration
 */
/*
 * Memory Mode Selection
 */
/*
 * Extended CPU Configuration
 */
/*
 * General Configuration
 */
/*
 * Mmap Configuartion
 */
/*
 * Build Options
 */
/*
 * Debugging Options
 */
/*
 * Installation Options
 */
/*
 * Module Options
 */
/*
 * External Demodulator
 */
/*
 * Env config
 */
/*
 *#############################################################################
 *
 * Copyright (c) 2006-2013 MStar Semiconductor, Inc.
 * All rights reserved.
 *
 * Unless otherwise stipulated in writing, any and all information contained
 * herein regardless in any format shall remain the sole proprietary of
 * MStar Semiconductor Inc. and be kept in strict confidence
 * (¡§MStar Confidential Information¡¨) by the recipient.
 * Any unauthorized act including without limitation unauthorized disclosure,
 * copying, use, reproduction, sale, distribution, modification, disassembling,
 * reverse engineering and compiling of the contents of MStar Confidential
 * Information is unlawful and strictly prohibited. MStar hereby reserves the
 * rights to any and all damages, losses, costs and expenses resulting therefrom.
 *
 *#############################################################################
 */
OUTPUT_ARCH(arm)
OUTPUT_FORMAT("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")
ENTRY(_vector)
MEMORY
{
    boot : ORIGIN = 0x00000000, LENGTH = 8K
    rom : ORIGIN = 0x00000000+0x2000, LENGTH = 18K
    ram : ORIGIN = 0x20000000, LENGTH = 128K
}
SECTIONS
{
    .text1 :
    {
        _ld_boot_start = ABSOLUTE(.);
        *boot.o (.text*)
        . = ALIGN(16);
        _ld_boot_end = ABSOLUTE(.);
        _ld_boot_size = _ld_boot_end - _ld_boot_start;
    } > boot
    .text2 : AT ( LOADADDR(.text1) + 0x2000 )
    {
        _ld_bootrom_start = ABSOLUTE(.);
        *drvRIU.o (.text*)
        *bootrom.o (.text*)
        *bootrom_pll.o (.text*)
        *bootrom_clock.o (.text*)
        *bootrom_peripheral.o (.text*)
        *bootrom_cache.o (.text*)
        *bootrom_miu.o (.text*)
        *bootrom_miu_str.o (.text*)
        *bootrom_miu_txdqs.o (.text*)
        *bootrom.o (.rodata*)
        *bootrom_data_miu.o (.rodata*)
        *bootrom_data_str.o (.rodata*)
        KEEP (*(SORT_BY_NAME(.rodata.padInitTbl_PreInit)))
        . = ALIGN(16);
        _ld_bootrom_end = ABSOLUTE(.);
        _ld_bootrom_size = _ld_bootrom_end - _ld_bootrom_start;
    } > rom
    .text3 : AT (LOADADDR(.text2) + SIZEOF(.text2))
    {
        _ld_bootram_start = ABSOLUTE(.);
        *bootram.o (.text*)
        KEEP (*(SORT_BY_NAME(.rodata.padInitTbl)))
        *nandflash.o (.text*)
        *nandflash.o (.rodata*)
        *uart16550.o (.text*)
        *setSPI.o (.text*)
        *setSPI.o (.rodata*)
        *apiBDMA.o (.text*)
        *apiBDMA.o (.rodata*)
        *MSDecompress.o (.text*)
        *MSDecompress.o (.rodata*)
        *(.ARM.exidx*)
    } > ram
    .data :
    {
        . = ALIGN(16);
        _ld_bootdata_start = ABSOLUTE(.);
        *(.data*)
        . = ALIGN(16);
        _ld_bootdata_end = ABSOLUTE(.);
        _ld_bootram_end = ABSOLUTE(.);
        _ld_bootram_size = _ld_bootram_end - _ld_bootram_start;
    } > ram
    .bss :
    {
        . = ALIGN(16);
        _ld_bootbss_start = ABSOLUTE(.);
        *(.bss*)
        . = ALIGN(16);
        _ld_bootbss_end = ABSOLUTE(.);
    } > ram
    /DISCARD/ :
    {
        /* ABI crap starts here */
        *(.reginfo)
    }
    .padding : AT(LOADADDR(.text1) + 0x10000 - 4)
    {
        LONG(0x0)
    } > ram
}

==================================================
attempt to open src/lib.a succeeded
(src/lib.a)7alloc.o
(src/lib.a)MSDecompress.o
(src/lib.a)apiRSA.o
(src/lib.a)apiSECURE.o
(src/lib.a)apiSHA.o
(src/lib.a)drvRIU.o
(src/lib.a)lzmadec.o
(src/lib.a)uart16550.o
(src/lib.a)zlib.o
attempt to open src/napoli/lib.a succeeded
(src/napoli/lib.a)apiBDMA.o
(src/napoli/lib.a)arm_compile.o
(src/napoli/lib.a)boot.o
(src/napoli/lib.a)bootram.o
(src/napoli/lib.a)bootrom.o
(src/napoli/lib.a)bootrom_cache.o
(src/napoli/lib.a)bootrom_clock.o
(src/napoli/lib.a)bootrom_data_miu.o
(src/napoli/lib.a)bootrom_data_str.o
(src/napoli/lib.a)bootrom_miu.o
(src/napoli/lib.a)bootrom_miu_str.o
(src/napoli/lib.a)bootrom_miu_txdqs.o
(src/napoli/lib.a)bootrom_peripheral.o
(src/napoli/lib.a)bootrom_pll.o
(src/napoli/lib.a)drvPadConf.o
attempt to open src/built-in.o succeeded
attempt to open src/napoli/built-in.o succeeded
